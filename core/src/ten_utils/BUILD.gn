#
# Copyright Â© 2025 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//build/options.gni")
import("//build/ten_runtime/feature/combine_static_library.gni")
import("//build/ten_utils/options.gni")
import("//build/ten_utils/utils.gni")
import("//third_party/libuv/output_libs.gni")
import("//third_party/yyjson/output_libs.gni")

ten_utils_glob("ten_utils_files") {
  deps = [
    "container",
    "sanitizer",
    "schema",
  ]

  if (ten_utils_enable_io) {
    deps += [ "io" ]
  }

  if (ten_utils_enable_backtrace) {
    deps += [ "backtrace" ]
  }

  if (ten_utils_enable_lib) {
    deps += [ "lib" ]
  }

  if (ten_utils_enable_log) {
    deps += [ "log" ]
  }

  if (ten_utils_enable_value) {
    deps += [ "value" ]
  }
}

static_library("ten_utils_static") {
  deps = [ ":ten_utils_files" ]
  public_configs = [ "//build/ten_utils:utils_public_config" ]
  configs += [ "//build/ten_utils:utils_private_config" ]
}

shared_library("ten_utils_shared") {
  output_name = "ten_utils"

  deps = [ ":ten_utils_files" ]
  configs += [ "//build/ten_utils:utils_private_config" ]

  public_configs = [ "//build/ten_utils:utils_public_config" ]

  if (is_mac) {
    ldflags = [
      # Enable the executable to look in the current directory for shared
      # library.
      "-Wl,-rpath,@loader_path",

      # Enable the executable to look in 'lib/' for shared library.
      "-Wl,-rpath,@loader_path/../lib/",

      "-Xlinker",
      "-install_name",
      "-Xlinker",
      "@rpath/libten_utils.dylib",
    ]
  } else if (is_linux) {
    ldflags = [
      # Enable the executable to look in the current directory for shared
      # library.
      "-Wl,-rpath=\$ORIGIN",

      # Enable the executable to look in '<parent-folder>/lib/' for shared
      # library.
      "-Wl,-rpath=\$ORIGIN/../lib/",
    ]
  } else {
    if (!defined(ldflags)) {
      ldflags = []
    }
  }
}

ten_utils_group("ten_utils") {
  if (ten_utils_build_shared) {
    public_deps = [ ":ten_utils_shared" ]
  } else {
    public_deps = [ ":ten_utils_combined_static" ]
  }
}

# The complete_static_lib=true feature of a static_library target in GN is
# intended to automatically include all other static library dependencies into
# that static_library. This requires that every dependency be managed through GN
# (for example, via source_set or other static_library declarations). Since
# yyjson and libuv are built by CMake using our custom cmake action, GN cannot
# automatically discover sufficient information about them (such as which source
# files and object files are produced) to support complete_static_lib=true.
# Therefore, we cannot automate this with complete_static_lib=true. Instead, we
# use the custom combine_static_library below to manually merge all static
# libraries that ten_utils_static depends on.
combine_static_library("ten_utils_combined_static") {
  yyjson_static = filter_include(yyjson_output_libs,
                                 [
                                   "*.a",
                                   "*.lib",
                                 ])
  assert(yyjson_static != [], "No yyjson static library found.")

  libuv_static = filter_include(libuv_output_libs,
                                [
                                  "*.a",
                                  "*.lib",
                                ])
  assert(libuv_static != [], "No libuv static library found.")

  utils_static = ""
  if (is_win) {
    utils_static = "${root_out_dir}/obj/core/src/ten_utils/ten_utils_static.lib"
  } else {
    utils_static =
        "${root_out_dir}/obj/core/src/ten_utils/libten_utils_static.a"
  }

  # The utils_static should be the first item in the list.
  libraries = [
    utils_static,
    yyjson_static[0],
    libuv_static[0],
  ]

  public_deps = [ ":ten_utils_static" ]

  deps = []
  if (ten_enable_ten_rust) {
    deps += [ "//core/src/ten_rust:asan_config" ]
  }
}
